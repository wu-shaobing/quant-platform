version: '3.8'

services:
  # PostgreSQL测试数据库
  postgres-test:
    image: postgres:15-alpine
    container_name: quant-platform-postgres-test
    environment:
      POSTGRES_DB: quant_platform_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./scripts/init_test_db.sql:/docker-entrypoint-initdb.d/init_test_db.sql:ro
    ports:
      - "5433:5432"
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d quant_platform_test"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis测试缓存
  redis-test:
    image: redis:7-alpine
    container_name: quant-platform-redis-test
    command: redis-server --appendonly yes --requirepass test_password
    volumes:
      - redis_test_data:/data
    ports:
      - "6380:6379"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # 后端测试服务
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: test
    container_name: quant-platform-backend-test
    environment:
      - CTP_ENVIRONMENT=test
      - CTP_DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/quant_platform_test
      - CTP_REDIS_URL=redis://:test_password@redis-test:6379/0
      - CTP_LOG_LEVEL=DEBUG
      - CTP_TESTING=true
      - CTP_JWT_SECRET_KEY=test_jwt_secret_key_for_testing_only
      - CTP_ENCRYPTION_KEY=test_encryption_key_32_chars_long
    volumes:
      - ./backend:/app
      - ./logs/test:/var/log/quant-platform
      - ./data/test:/app/data
    ports:
      - "8001:8000"
      - "9091:9090"  # Test metrics
    networks:
      - test-network
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python -c 'import time; time.sleep(10)' &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Starting test server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # 前端测试服务
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: test
    container_name: quant-platform-frontend-test
    environment:
      - NODE_ENV=test
      - VITE_API_BASE_URL=http://backend-test:8000/api/v1
      - VITE_WS_URL=ws://backend-test:8000/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3001:3000"
    networks:
      - test-network
    depends_on:
      backend-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    command: >
      sh -c "
        echo 'Installing dependencies...' &&
        pnpm install &&
        echo 'Starting test server...' &&
        pnpm dev --host 0.0.0.0 --port 3000
      "

  # Selenium Grid Hub (用于E2E测试)
  selenium-hub:
    image: selenium/hub:4.15.0
    container_name: selenium-hub
    ports:
      - "4442:4442"
      - "4443:4443"
      - "4444:4444"
    networks:
      - test-network
    environment:
      - GRID_MAX_SESSION=16
      - GRID_BROWSER_TIMEOUT=300
      - GRID_TIMEOUT=300

  # Chrome浏览器节点
  selenium-chrome:
    image: selenium/node-chrome:4.15.0
    container_name: selenium-chrome
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444
      - NODE_MAX_INSTANCES=4
      - NODE_MAX_SESSION=4
    networks:
      - test-network
    volumes:
      - /dev/shm:/dev/shm

  # Firefox浏览器节点
  selenium-firefox:
    image: selenium/node-firefox:4.15.0
    container_name: selenium-firefox
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444
      - NODE_MAX_INSTANCES=4
      - NODE_MAX_SESSION=4
    networks:
      - test-network
    volumes:
      - /dev/shm:/dev/shm

  # 测试数据库管理工具
  pgadmin-test:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-test
    environment:
      PGADMIN_DEFAULT_EMAIL: test@quant-platform.com
      PGADMIN_DEFAULT_PASSWORD: test_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_test_data:/var/lib/pgadmin
    ports:
      - "5051:80"
    networks:
      - test-network
    depends_on:
      - postgres-test

  # Redis管理工具
  redis-commander-test:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander-test
    environment:
      - REDIS_HOSTS=local:redis-test:6379:0:test_password
    ports:
      - "8082:8081"
    networks:
      - test-network
    depends_on:
      - redis-test

  # 测试报告服务
  allure-server:
    image: frankescobar/allure-docker-service
    container_name: allure-server
    environment:
      CHECK_RESULTS_EVERY_SECONDS: 3
      KEEP_HISTORY: 20
    ports:
      - "5050:5050"
    volumes:
      - allure_results:/app/allure-results
      - allure_reports:/app/default-reports
    networks:
      - test-network

  # 性能测试工具
  k6:
    image: grafana/k6:latest
    container_name: k6-test
    volumes:
      - ./tests/performance:/scripts
    networks:
      - test-network
    depends_on:
      backend-test:
        condition: service_healthy
    profiles:
      - performance
    command: run --out influxdb=http://influxdb:8086/k6 /scripts/load_test.js

  # InfluxDB (用于存储性能测试结果)
  influxdb:
    image: influxdb:2.7
    container_name: influxdb-test
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin_password
      - DOCKER_INFLUXDB_INIT_ORG=quant-platform
      - DOCKER_INFLUXDB_INIT_BUCKET=k6
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - test-network
    profiles:
      - performance

  # Grafana (用于可视化性能测试结果)
  grafana-test:
    image: grafana/grafana:10.2.0
    container_name: grafana-test
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3002:3000"
    volumes:
      - grafana_test_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - test-network
    depends_on:
      - influxdb
    profiles:
      - performance

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local
  pgadmin_test_data:
    driver: local
  allure_results:
    driver: local
  allure_reports:
    driver: local
  influxdb_data:
    driver: local
  grafana_test_data:
    driver: local

networks:
  test-network:
    driver: bridge
    name: quant-test-network
